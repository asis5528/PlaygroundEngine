#version 450

layout (local_size_x = 8, local_size_y = 8,local_size_z = 8) in;
layout (binding = 0, rgba32f) uniform coherent image3D resultImage;
layout(binding = 1) uniform sampler2D tex;
layout (binding = 2, rgba32f) uniform image3D resultImage2;
layout(binding = 3) uniform sampler3D tex2;
layout(binding = 4) uniform computeUbo {
vec4 data;
    float time;
    int Frame;
} ubo;

/*
#define R textureSize(tex,0)
vec4 T(vec3 U){

    return texture(tex,(U+0.5)/R);
}

vec4 T2(vec3 U){

    return texture(tex2,(U+0.5)/R);
}
void main()
{
ivec3 dims = imageSize(resultImage);
vec3 U = vec3(gl_GlobalInvocationID);

float time = ubo.time;
p-=0.5;

vec3 q = p;


vec4 O = T(U+T(U).xyz*0.5);
float den = T2(U+T(U).xyz).x;
vec4 a,b,c,d,e,f;
    
    a = T(U+vec3(1.,0.,0));
    b = T(U+vec3(0.,1.,0.));
    c = T(U+vec3(-1.,0.,0.));
    d = T(U+vec3(0.,-1.,0.));
    e = T(U+vec3(0.,0.,1.));
    f = T(U+vec3(0.,0.,-1.));
    float kd = 0.;
     if(den>0.01){
    kd = 1.0;
    }
    O = vec4(O.x+(a.w-c.w)*1.,O.y+(b.w-d.w)*1.-0.00*den,O.z+(e.w-f.w)*1.,(a.w+b.w+c.w+d.w+e.w+f.w)*0.16666667-(c.x-a.x+d.y-b.y+f.z-e.z)*0.025);



    

   if(abs(p.y)>0.49){
        O.xyz*=0.;
   }
    if(abs(p.x)>0.49){
        O.xyz*=0.;
   }
    if(abs(p.z)>0.49){
        O.xyz*=0.;
   }
    
	imageStore(resultImage, ivec3(gl_GlobalInvocationID), O);
	
    imageStore(resultImage2, ivec3(gl_GlobalInvocationID), vec4(den,0.,0.,0.));

}*/

#define A(i) imageLoad(resultImage,ivec3(max(i+u,0.)))
void main()
{
vec3 u = vec3(gl_GlobalInvocationID);
vec3 iResolution =vec3(imageSize(resultImage));
vec4 r = vec4(1.0);
 r *= 0.;
 const float siz = 4.;
    for(vec3 i = vec3(-siz); ++i.x <= siz;) for(i.y = -siz; ++i.y <= siz;) for(i.z = -siz; ++i.z <= siz;) {
    vec4 neigh = A(i);
        float m = neigh.w;
        vec3 v = neigh.xyz;                          // neighbour velocity
       v.y-=0.05;
       vec3 fv = v+i;
       r += m * exp(-(fv.x*fv.x+fv.y*fv.y+fv.z*fv.z)) /( 5.56833) * vec4(v,1.0);
               
           
            r.xyz += m * exp(-(fv.x*fv.x+fv.y*fv.y+fv.z*fv.z))/( 5.56833) * (0.3-m) * fv;
               


    }

    r.xyz /= r.w + 1e-6;

     
       vec3 uv = u/iResolution.xyz;
       //float fr = imageLoad(resultImage,ivec2(4.,300.)).w;
      //  float bounds = texture(tex,vec2(uv.x,(1.-uv.y))).r;
      
       
    
  
        vec3 m = 4.*u/iResolution.xyz-2.;
        
       if(mod(ubo.time,20.)<10.){
            vec3 n = m;
          //  n.x = mod(n.x*5.,4.)-2.0;
         r += vec4(0.,0.,0.,1.0) * smoothstep(0.3,0.0,length(n+vec3(sin(ubo.time*0.25)*0.3,-1.7,0.)));
       
       }
         if(u.y<10){
         
         if(r.y<0.0){
            r.xyz*=vec3(1.,-1.0,1.);
         }
        r.y+=0.05;
       //  r.y+=0.5;
         

    }

      if(u.x<5){
      
        r.xyz*=vec3(-1.,1.,1.);
        
    }
      if(u.x>123.){
        r.xyz*=vec3(-1.,1.,1.);
    }
          if(u.z<3.0){
        r.xyz*=vec3(1.,1.,-1.);
    }
      if(u.z>123.){
        r.xyz*=vec3(1.,1.,-1.);
    }
    if(length(m+vec3(-1.3,0.1,0.))<0.3){
     if(mod(ubo.time,130.)<50.){
         r.xyz*=vec3(-1.);
    }
    }
    ivec3 dims = imageSize(resultImage);
     vec3 p = vec3(gl_GlobalInvocationID)/vec3(dims);
     if(abs(p.z-0.5)<0.05){
       float bounds = texture(tex,vec2(1.-p.x,min(1.-p.y-0.2,1.0))).x;

    if(bounds>0.0001){
        if(mod(ubo.time,130.)<50.){
            r.xyz*=vec3(-1.);
        }
       // r.w*=1.+bounds*0.1;
    }
       }
       //r*=0.;
        //  r.w = ubo.time*0.1;
      
         imageStore(resultImage, ivec3(gl_GlobalInvocationID), r);
}